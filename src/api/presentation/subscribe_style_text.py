import html
from datetime import datetime
from typing import Optional, List

from src.application.dto.steam_dto import ChangedGamesWishlistModel
from src.domain.logger import ILogger
from src.shared.dispatcher import DispatcherCommands


class SubscribeStyleText:
    def __init__(self,logger:ILogger):
        self.dispatcher_command = DispatcherCommands(
            command_map={
                "subscribe_steam_news":self.generate_steam_event_messages,
                "subscribe_hot_discount_notificate":self.generate_hot_discount_notificate,
                "subscribe_free_games":self.generate_free_games,
                "subscribe_new_release":self.generate_new_release,
                "subscribe_wishlist_notificate":self.generate_wishlist_notificate,
            }
        )
        self.logger = logger

    @staticmethod
    def user_have_subscribe(description: str):
        return (
            f"{description}\n\n"
            f"‚úÖ <b>–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.</b>"
        )

    @staticmethod
    def user_dont_have_subscribe(description: str):
        return (
            f"{description}\n\n"
            f"‚ùóÔ∏è <b>–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.</b>\n"
            f"–ù–µ –∑–≤–æ–ª—ñ–∫–∞–π—Ç–µ ‚Äî –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º–∏! üòâ"
        )

    @staticmethod
    def after_subscribes():
        return (
            "<b>‚úîÔ∏è –£—Å–ø—ñ—à–Ω–æ:</b> <i>–ø—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.</i>"
        )

    @staticmethod
    def after_unsubscribe():
        return (
            "<b>üõë –ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b> <i>–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.</i>"
        )

    @staticmethod
    def after_bad_subscribe():
        return (
            "<b>‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É.</b> <i>–ô–º–æ–≤—ñ—Ä–Ω–æ, –≤–æ–Ω–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.</i>"
        )

    @staticmethod
    def after_bad_unsubscribe():
        return (
            "<b>‚ö†Ô∏è –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ.</b> <i>–ü—ñ–¥–ø–∏—Å–∫–∞, –º–æ–∂–ª–∏–≤–æ, –≤–∂–µ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –Ω–µ —ñ—Å–Ω—É–≤–∞–ª–∞.</i>"
        )

    @staticmethod
    def generate_steam_event_messages(data: List[dict]) -> str:
        if data is None or len(data) == 0:
            return None
        if isinstance(data, list):
            event:dict = data[0]
        else:
            event = data
        name = event.get("name", "–ü–æ–¥—ñ—è")

        if event['type_name'] == "festival":
            text = (
                f"üéâ <b>{name}</b> —É–∂–µ –ø–æ—á–∞–≤—Å—è!\n"
                f"üóì <i>{event['date_start']} ‚Äî {event['date_end']}</i>\n"
                f"üéÆ –ü–æ—Ä–∏–Ω—å —É —Å–≤—ñ—Ç –Ω–æ–≤–∏—Ö –≤—Ä–∞–∂–µ–Ω—å, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π —ñ —Å—é—Ä–ø—Ä–∏–∑—ñ–≤!\n"
                f"üöÄ <b>–ì–æ—Ç—É–π—Å—è –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –Ω–æ–≤–µ!</b>"
            )
        else:
            text = (
                f"üî• <b>{name}</b> —É —Å–∞–º–æ–º—É —Ä–æ–∑–ø–∞–ª—ñ!\n"
                f"üóì <i>{event['date_start']} ‚Äî {event['date_end']}</i>\n"
                f"üí∏ –ó–Ω–∏–∂–∫–∏, –Ω–æ–≤—ñ —Ä–µ–ª—ñ–∑–∏ —Ç–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–∏ —á–µ–∫–∞—é—Ç—å —Ç–µ–±–µ!\n"
                f"‚è≥ <b>–ù–µ –∑–≤–æ–ª—ñ–∫–∞–π ‚Äî –≤—Å–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä–æ–∑–±–∏—Ä–∞—é—Ç—å –º–∏—Ç—Ç—î–≤–æ!</b>"
            )

        return text

    @staticmethod
    def __generate_full_game_model(game: dict) -> str:
        return (
            f"<b>üéÆ {game['name']}</b>\n"
            f"<b>üóì –î–∞—Ç–∞ –≤–∏—Ö–æ–¥—É:</b> {game['release_data']}\n"
            f"<b>üìà Metacritic:</b> {game['metacritic'] if game['metacritic']=="-1" else '‚Äî'}\n"
            f"<b>üè∑ –ñ–∞–Ω—Ä:</b> {', '.join(g['ganres_name'] for g in game['game_ganre'])}\n"
            f"<b>üë®‚Äçüíª –†–æ–∑—Ä–æ–±–Ω–∏–∫:</b> {', '.join(p['publisher_name'] for p in game['game_publisher'])}\n"
            f"<b>üÜì –¶—ñ–Ω–∞:</b> {'–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ' if game['is_free'] else game['final_formatted_price']}\n\n"
            f"{game['short_description']}\n\n"
            f"<a href='https://store.steampowered.com/app/{game['steam_appid']}'>üõí –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Steam</a>"
        )

    @staticmethod
    def __generate_game_accent_discount(game: dict) -> str:
        status = (
            "<b>üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</b>"
            if game['is_free'] or game['discount'] == 100
            else f"<b>üí∏ -{game['discount']}%</b> ‚Äî {game['final_formatted_price']}"
        )
        return (
            f"<b>üîî {game['name']}</b> —Ç–µ–ø–µ—Ä {status}!\n"
            f"{game['short_description']}\n\n"
            f"<a href='https://store.steampowered.com/app/{game['steam_appid']}'>üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Steam</a>\n\n"
        )

    @staticmethod
    def __generate_wishlist_changes(game: ChangedGamesWishlistModel) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML caption –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
        """
        name = html.escape(game.name)
        price_now = f"{game.price_now}‚Ç¥" if game.price_now > 0 else "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ"
        price_before = f"{game.price_before}‚Ç¥"
        discount_now = f"-{game.discount_now}%"
        discount_before = f"-{game.discount_before}%" if game.discount_before > 0 else "–±–µ–∑ –∑–Ω–∏–∂–∫–∏"

        if game.discount_now == 100 and game.price_now == 0:
            text = (
                f"<b>üéâ {name}</b>\n"
                f"–ì—Ä–∞ —Å—Ç–∞–ª–∞ <u>–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—é</u>!\n"
                f"–¶—ñ–Ω–∞ –±—É–ª–∞: <s>{price_before}</s>\n"
                f"–¢–µ–ø–µ—Ä: <b>{price_now}</b> üÜì"
            )

        elif game.discount_now < game.discount_before and game.price_now > game.price_before:
            text = (
                f"<b>üìà {name}</b>\n"
                f"–¶—ñ–Ω–∞ –∑—Ä–æ—Å–ª–∞: <s>{price_before}</s> ‚Üí <b>{price_now}</b>\n"
                f"–ó–Ω–∏–∂–∫–∞ –∑–º–µ–Ω—à–µ–Ω–∞: {discount_before} ‚Üí {discount_now}"
            )

        elif game.discount_now > game.discount_before and game.price_now < game.price_before:
            text = (
                f"<b>üî• {name}</b>\n"
                f"–ó–Ω–∏–∂–∫–∞ –∑—Ä–æ—Å–ª–∞: {discount_before} ‚Üí {discount_now}\n"
                f"–¶—ñ–Ω–∞ –∑–º–µ–Ω—à–∏–ª–∞—Å—å: <s>{price_before}</s> ‚Üí <b>{price_now}</b>"
            )

        elif game.discount_now == game.discount_before and game.price_now > game.price_before:
            text = (
                f"<b>üí∞ {name}</b>\n"
                f"–¶—ñ–Ω–∞ –∑—Ä–æ—Å–ª–∞: <s>{price_before}</s> ‚Üí <b>{price_now}</b>\n"
                f"–ó–Ω–∏–∂–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å: {discount_now}"
            )

        elif game.discount_now == game.discount_before and game.price_now < game.price_before:
            text = (
                f"<b>üîª {name}</b>\n"
                f"–¶—ñ–Ω–∞ –∑–º–µ–Ω—à–∏–ª–∞—Å—å: <s>{price_before}</s> ‚Üí <b>{price_now}</b>\n"
                f"–ó–Ω–∏–∂–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å: {discount_now}"
            )

        elif game.discount_now > game.discount_before and game.price_now == game.price_before:
            text = (
                f"<b>üìâ {name}</b>\n"
                f"–ó–Ω–∏–∂–∫–∞ –∑—Ä–æ—Å–ª–∞: {discount_before} ‚Üí {discount_now}\n"
                f"–¶—ñ–Ω–∞ –∑–∞–ª–∏—à–∏–ª–∞—Å—å: <b>{price_now}</b>"
            )

        elif game.discount_now < game.discount_before and game.price_now == game.price_before:
            text = (
                f"<b>‚ö†Ô∏è {name}</b>\n"
                f"–ó–Ω–∏–∂–∫–∞ –∑–º–µ–Ω—à–∏–ª–∞—Å—å: {discount_before} ‚Üí {discount_now}\n"
                f"–¶—ñ–Ω–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å: <b>{price_now}</b>"
            )

        else:
            text = f"<b>{name}</b>\n–¶—ñ–Ω–∞: {price_now}, –ó–Ω–∏–∂–∫–∞: {discount_now}"

        return text

    def generate_hot_discount_notificate(self, data) -> str:
        text = (
            "<b>üî• –ì–∞—Ä—è—á—ñ –∑–Ω–∏–∂–∫–∏ –≤ Steam!</b>\n"
            "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –Ω–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó ‚Äî —ñ–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –¥–æ 99%! –ü–æ—Ä–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤–æ—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É üéÆüí•\n\n"
        )
        self.logger.info("Execute GenerateHotDiscountNotificate")
        self.logger.debug(f"Data: {data}")
        for game in data:
            text += self.__generate_game_accent_discount(game)
        return text

    def generate_free_games(self, data) -> str:
        text = (
            "<b>üéÅ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —ñ–≥—Ä–∏ –≤ Steam!</b>\n"
            "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è —à–∞–Ω—Å–æ–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä—É—Ç—ñ —ñ–≥—Ä–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ. –ù–µ –ø—Ä–æ“ë–∞–≤ —Å–≤–æ—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å! üïπÔ∏è\n\n"
        )
        for game in data:
            text += self.__generate_game_accent_discount(game)
        return text

    def generate_new_release(self, data) -> str:
        text = (
            "<b>üÜï –ù–æ–≤—ñ —Ä–µ–ª—ñ–∑–∏ –Ω–∞ Steam!</b>\n"
            "–û—Å—å –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ —ñ–≥—Ä–∏, —â–æ –∑'—è–≤–∏–ª–∏—Å—è —É –º–∞–≥–∞–∑–∏–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä, –º–æ–∂–ª–∏–≤–æ —Å–µ—Ä–µ–¥ –Ω–∏—Ö —î —Ç–≤—ñ–π –Ω–æ–≤–∏–π —Ñ–∞–≤–æ—Ä–∏—Ç üéÆ\n\n"
        )
        self.logger.info("Execute GenerateHotDiscountNotificate")
        self.logger.debug(f"Data: {data}")
        for game in data:
            text += self.__generate_full_game_model(game)
        return text

    def generate_wishlist_notificate(self, data: List[dict]) -> str:
        return (
            "<b>üîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É —Ç–≤–æ—î–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ!</b>\n"
            "–Ñ –Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ —ñ–≥—Ä–∏, —è–∫—ñ —Ç–∏ –¥–æ–¥–∞–≤ –¥–æ –≤—ñ—à–ª–∏—Å—Ç–∞. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ —Å–≤—ñ–∂—ñ —Ä–µ–ª—ñ–∑–∏! üéÆ\n\n"
        )

    def generate_wishlist_subscribe(self, data:dict)->dict[str,List[str]]:
        new_data = {}

        for k,v in data.items():
            texts = []
            text_batch = ""
            for i,game in enumerate(v):
                text_batch += self.__generate_wishlist_changes(game=game)
                if i%5==0:
                    texts.append(text_batch)
                    text_batch = ""
            new_data[k] = texts

        return new_data


    def dispatcher(self,func_name,*args,**kwargs)->Optional[str]:
        return self.dispatcher_command.dispatch_sync(func_name,*args,**kwargs)


